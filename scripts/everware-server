#!/usr/bin/env python3
import jupyterhub.handlers.pages as pages
import jupyterhub.handlers.base as base
from jupyterhub import app
from everware import SpawnHandler, UserSpawnHandler, HomeHandler
import sys
import warnings

handlers_map = {
    pages.HomeHandler: HomeHandler,
    pages.SpawnHandler: SpawnHandler,
    base.UserSpawnHandler: UserSpawnHandler
}


class Everware(app.JupyterHub):
    name = 'everware'

    def init_handlers(self):
        super().init_handlers()
        self.replace_handlers(handlers_map)

    def replace_handlers(self, handlers_map):
        """Replace default handler classes with new ones.

        Parameters
        ----------
        handlers_map : dict
            Contains a mapping old_handler_class:new_handler_class.
        """
        replacement_count = 0
        for i, cur_handler in enumerate(self.handlers):
            new_handler = handlers_map.get(cur_handler[1])
            if new_handler:
                cur_handler = list(cur_handler)
                cur_handler[1] = new_handler
                self.handlers[i] = tuple(cur_handler)
                replacement_count += 1
        if replacement_count != len(handlers_map):
            warnings.warn('Some handler replacements failed', RuntimeWarning)

    def add_handlers(self, handlers):
        """Add new handlers.

        Parameters
        ----------
        handlers : iterable
            Contains tuples representing handlers: (url, handler[, init_args]).
        """
        if self.handlers[-1][0] == '(.*)':
            for handler in handlers:
                self.handlers.insert(-1, handler)
        else:
            for handler in handlers:
                self.handlers.append(handler)

main = Everware.launch_instance

if __name__ == "__main__":
    main(sys.argv)
